



네트워크(통신)
-> 통신


앱이 작동하는 Flow

DataBase <------------> Server <------------->Client(app,web,...)

Local DataBase의 한계
- 동기화가 어렵다.
- 상호작용이 불가능 하다. (ex> 댓글)

서버와 통신하는 방법
- 해당 Url로 전달한다.
- 인증정보를 보낸다.
- JSON 형식을 사용해서 Data를 보낸다.


JSON
- JavaScript Objects NOtation -> Javascript에서 객체를 만들 때 사용하는 표현식이다.

JSON형식
- [] -> List
- {} -> 객체
    -> "" -> 문자열
    -> "" 없으면 -> 숫자


Json Response
[
    {
        "id" :1,                        ->문서에 써있다. (필드의 타입에!)
        "name" : "홍길동",
        "age" : 20,
        "intro" : "나는 홍길동이다."
    },
    {
        "id" : 2,
        "name" : "김아무개",
        "age" : 10,
        "intro" : "나는 김아무개 입니다."
        }
]

해석하는 과정 => Json Parsing
->Json 을 코틀린이나 자바가 이해할 수 있게 변형 하는 과정.

Serializable (직렬화)
-> 자바 시스템 내부에서 사용되는 object를 외부에서 사용할 수 있도록 byte 형태로 데이터를 바꾸는것.
(=>
----------------------->
  id, name, age, intro

코틀린이나/ 자바가 알아 들을 수 있는 틀
class Person(
    var id: int? = null
    var name : String? = null
    var age : Int? = null
    var intro : String? = null
)
    -같은 변수명이 있는 곳을 찾아서 넣어준다.
이것이 직렬화 이다.

Request Type              Status Code
-GET = 정보 요청           -> 200OK (구글링 " http status code" 라고 하면 자세히 나옴!)
-POST = 정보 추가 요청     -> 201 Created
-DELETE = 정보 삭제 요청
-PUT = 정보 수정 요청

Status Code
- 200번대 -> 처리가 잘 된것!
- 외울 수 없다! (너무 많다!)



val number : Int = 10
val number = 10
->> kotlin은 반강타입 언어이다.
반면, Java는 강타입 언어! (타입을 꼭 적어줘야 한다.) )



Mock 서버 만드는 법!

1. postman에 들어간다.
2. 좌측 상단에 'new'를 누른다.
3. 이미 있는 서버가 아니면 'create a new url'을 만들어 준다.
4. name을 설정해준다 (이는 나중에 바꿀 수 있다.)


